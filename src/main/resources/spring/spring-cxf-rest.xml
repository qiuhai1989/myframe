<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

       xmlns:jaxrs="http://cxf.apache.org/jaxrs"

       xmlns:cxf="http://cxf.apache.org/core"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://cxf.apache.org/jaxrs
        http://cxf.apache.org/schemas/jaxrs.xsd
        http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd">


    <context:component-scan base-package="com.haiqiu.**.rest"  />

    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />




    <jaxrs:server id="categoryRESTService" address="/rest">

        <jaxrs:features>
           <!-- 配置该项可以日志记录请求输入输出信息已经默认信息-->
          <cxf:logging/>
            <!--
            由于不光CXF内置有拦截器，而且还可以自定义拦截器。这样WebServcie的SEI可能配置多个、一大堆拦截器，这样很不方便。在Struts2中可以自定义拦截器，他还提供了自定义拦截器堆栈的功能，将多个拦截器捆绑在一起使用。这样不必要一个一个的去注册拦截器。在CXF中也有类似功能，可以将拦截器捆绑在一起，你就可以将它注册到你要使用的地方，而不必一个一个拦截器的注册使用。
            实现拦截器的捆绑过程非常的简单，继承AbstractFeature 类来实现一个新的特征， 只需要覆盖initializeProvider 方法即可。其实Feature 就是将一组拦截器放在其中，然后一并注册使用。
            -->
            <bean class="com.haiqiu.interceptor.HelloWorldFeature"></bean>
        </jaxrs:features>
        <jaxrs:serviceBeans>
            <ref bean="categoryService" />
            <ref bean="ILotterySerivceImpl"/>
            <ref bean="NatureImpl"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <!-- JSON格式转换 -->
            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/>
            <!-- 异常捕获 -->
            <bean class="com.haiqiu.exception.InvokeFaultExceptionMapper" />
        </jaxrs:providers>
        <!-- 支持的协议 -->
        <jaxrs:extensionMappings>
           <entry key="json" value="application/json" />
            <entry key="xml" value="application/xml" />
        </jaxrs:extensionMappings>
        <!-- 编码格式 -->
        <jaxrs:languageMappings>
            <entry key="cn" value="cn-ZH" />
        </jaxrs:languageMappings>
    </jaxrs:server>


</beans>